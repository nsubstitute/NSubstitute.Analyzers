<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NonVirtualSetupSpecificationDescription" xml:space="preserve">
    <value>Non-virtual members can not be intercepted.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NonVirtualSetupSpecificationMessageFormat" xml:space="preserve">
    <value>Member {0} can not be intercepted. Only interface members and virtual, overriding, and abstract members can be intercepted.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NonVirtualSetupSpecificationTitle" xml:space="preserve">
    <value>Non-virtual setup specification.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="UnusedReceivedDescription" xml:space="preserve">
    <value>Unused received check.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="UnusedReceivedMessageFormat" xml:space="preserve">
    <value>Unused received check. To fix, make sure there is a call after "{0}". Correct: "sub.{0}().SomeCall();". Incorrect: "sub.{0}();"</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="UnusedReceivedTitle" xml:space="preserve">
    <value>Received check.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="UnusedReceivedForOrdinaryMethodDescription" xml:space="preserve">
    <value>Unused received check.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="UnusedReceivedForOrdinaryMethodMessageFormat" xml:space="preserve">
    <value>Unused received check. To fix, make sure there is a call after "{0}". Correct: "SubstituteExtensions.{0}(sub).SomeCall();". Incorrect: "SubstituteExtensions.{0}(sub);"</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="UnusedReceivedForOrdinaryMethodTitle" xml:space="preserve">
    <value>Received check.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
 <data name="SubstituteForPartsOfUsedForInterfaceDescription" xml:space="preserve">
    <value>Can only substitute for parts of classes, not interfaces or delegates.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteForPartsOfUsedForInterfaceMessageFormat" xml:space="preserve">
    <value>Can only substitute for parts of classes, not interfaces or delegates. Use Substitute.For&lt;{0}&gt; instead of Substitute.ForPartsOf&lt;{0}&gt; here.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteForPartsOfUsedForInterfaceTitle" xml:space="preserve">
    <value>Substitute.ForPartsOf used for interface.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
    <data name="SubstituteForWithoutAccessibleConstructorDescription" xml:space="preserve">
    <value>Could not find accessible constructor.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteForWithoutAccessibleConstructorMessageFormat" xml:space="preserve">
    <value>Could not find accessible constructor. Make sure that type {0} exposes public or protected constructors.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteForWithoutAccessibleConstructorTitle" xml:space="preserve">
    <value>Could not find accessible constructor.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SubstituteForConstructorParametersMismatchDescription" xml:space="preserve">
    <value>Constructor parameters count mismatch.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteForConstructorParametersMismatchMessageFormat" xml:space="preserve">
    <value>The number of arguments passed to {0} do not match the number of constructor arguments for {1}. Check the constructors for {1} and make sure you have passed the required number of arguments.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteForConstructorParametersMismatchTitle" xml:space="preserve">
    <value>Constructor parameters count mismatch.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SubstituteForInternalMemberDescription" xml:space="preserve">
    <value>Substitute for internal member.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteForInternalMemberMessageFormat" xml:space="preserve">
    <value>Can not substitute for internal type. To substitute for internal type expose your type to DynamicProxyGenAssembly2 via [assembly: InternalsVisibleTo("DynamicProxyGenAssembly2")]</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteForInternalMemberTitle" xml:space="preserve">
    <value>Can not create.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SubstituteConstructorMismatchDescription" xml:space="preserve">
    <value>Unable to find matching constructor.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteConstructorMismatchMessageFormat" xml:space="preserve">
    <value>Arguments passed to {0} do not match the constructor arguments for {1}. Check the constructors for {1} and make sure you have passed the required arguments and argument types.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteConstructorMismatchMemberTitle" xml:space="preserve">
    <value>Unable to find matching constructor.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SubstituteMultipleClassesDescription" xml:space="preserve">
    <value>Can not substitute for multiple classes.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteMultipleClassesMessageFormat" xml:space="preserve">
    <value>Can not substitute for multiple classes. To substitute for multiple types only one type can be a concrete class; other types can only be interfaces.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteMultipleClassesMemberTitle" xml:space="preserve">
    <value>Can not substitute for multiple classes.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SubstituteConstructorArgumentsForInterfaceDescription" xml:space="preserve">
    <value>Can not provide constructor arguments when substituting for an interface.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteConstructorArgumentsForInterfaceMessageFormat" xml:space="preserve">
    <value>Can not provide constructor arguments when substituting for an interface. Use Substitute.For&lt;{0}&gt;() instead.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteConstructorArgumentsForInterfaceMemberTitle" xml:space="preserve">
    <value>Can not provide constructor arguments when substituting for an interface.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SubstituteConstructorArgumentsForDelegateeDescription" xml:space="preserve">
    <value>Can not provide constructor arguments when substituting for a delegate.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SubstituteConstructorArgumentsForDelegateMessageFormat" xml:space="preserve">
    <value>Can not provide constructor arguments when substituting for a delegate. Use Substitute.For&lt;{0}&gt;() instead.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SubstituteConstructorArgumentsForDelegateMemberTitle" xml:space="preserve">
    <value>Can not provide constructor arguments when substituting for a delegate.</value>
    <comment>The title of the diagnostic.</comment>
  </data>
</root>
